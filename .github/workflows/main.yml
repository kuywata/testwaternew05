import os
import re
import requests
from datetime import datetime, timedelta
import pytz
from bs4 import BeautifulSoup

# ‚îÄ‚îÄ‚îÄ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
GRAPH_URL                 = 'https://tiwrm.hii.or.th/DATA/REPORT/php/itc_zcgraph.php?id1=37'
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET_ID            = os.environ.get('LINE_TARGET_ID')
TIMEZONE_THAILAND         = pytz.timezone('Asia/Bangkok')
HISTORICAL_LOG_FILE       = 'historical_log.csv'
LAST_DATA_FILE            = 'last_data.txt'

def get_water_data():
    """
    ‡∏î‡∏∂‡∏á HTML popup ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏Ø ‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÜ
    ‡πÅ‡∏•‡πâ‡∏ß parse <td class="text_bold" colspan="2">439.00/ ‚Ä¶ cms</td>
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ "439.00 cms"
    """
    headers = {'User-Agent': 'Mozilla/5.0'}
    resp = requests.get(GRAPH_URL, headers=headers, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text, 'html.parser')

    cell = soup.select_one('td.text_bold[colspan="2"]')
    if not cell:
        raise RuntimeError("‡πÑ‡∏°‡πà‡∏û‡∏ö <td class='text_bold' colspan='2'> ‡πÉ‡∏ô popup HTML")

    raw = cell.get_text(strip=True)   # e.g. "439.00/2840cms" ‡∏´‡∏£‡∏∑‡∏≠ "439.00/ 2840 cms"
    main = raw.split('/', 1)[0]       # "439.00"
    num  = re.sub(r"[^\d.]", "", main)
    if not num:
        raise RuntimeError("‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏≤‡∏Å raw: " + raw)
    return f"{num} cms"

def send_line_message(text):
    url = 'https://api.line.me/v2/bot/message/push'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'
    }
    payload = {'to': LINE_TARGET_ID, 'messages':[{'type':'text','text':text}]}
    resp = requests.post(url, headers=headers, json=payload, timeout=10)
    resp.raise_for_status()

def main():
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    try:
        last = open(LAST_DATA_FILE, 'r', encoding='utf-8').read().strip()
    except FileNotFoundError:
        last = ''

    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    try:
        current = get_water_data()
    except Exception as e:
        print("Error fetching data:", e)
        return

    # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á LINE
    if current != last:
        now = datetime.now(TIMEZONE_THAILAND)
        msg = (
            f"üåä ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤\n"
            f"‚úÖ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current}\n"
            f"‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {last or '‚Äì'}\n"
            f"üóìÔ∏è {now.strftime('%d/%m/%Y %H:%M:%S')}"
        )
        send_line_message(msg)
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        with open(LAST_DATA_FILE, 'w', encoding='utf-8') as f:
            f.write(current)
        with open(HISTORICAL_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{now.isoformat()},{current}\n")
        print("‡∏™‡πà‡∏á LINE ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° = ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà)")

if __name__ == "__main__":
    main()
