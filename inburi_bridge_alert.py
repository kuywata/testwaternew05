import os
import json
import time
import requests
import shutil
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service

# --- Constants and configuration ---
DATA_FILE = "inburi_bridge_data.json"
NOTIFICATION_THRESHOLD = float(os.getenv("NOTIFICATION_THRESHOLD_M", "0.10"))
LINE_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

# --- LINE notification ---
def send_line_message(message: str):
    if not LINE_ACCESS_TOKEN:
        print("--> ‚ùå LINE_CHANNEL_ACCESS_TOKEN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤!")
        return
    url = "https://api.line.me/v2/bot/message/broadcast"
    headers = {
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {"messages": [{"type": "text", "text": message}]}
    try:
        resp = requests.post(url, headers=headers, json=payload, timeout=10)
        if resp.status_code == 200:
            print("--> ‚úÖ ‡∏™‡πà‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print(f"--> ‚ùå LINE API error: {resp.status_code} {resp.text}")
    except Exception as e:
        print(f"--> ‚ùå Exception when sending LINE: {e}")

# --- WebDriver setup ---
def setup_driver():
    chrome_options = Options()
    # Determine Chrome/Chromium binary location
    chrome_bin = os.getenv("CHROME_BIN")
    if not chrome_bin:
        # try common binaries
        chrome_bin = (
            shutil.which("chromium-browser") or
            shutil.which("chromium") or
            shutil.which("google-chrome") or
            "/usr/bin/google-chrome"
        )
    chrome_options.binary_location = chrome_bin
    # headless mode arguments
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")

    # Determine chromedriver path
    chromedriver_path = (
        shutil.which("chromedriver") or
        os.getenv("CHROMEDRIVER_PATH")
    )
    if chromedriver_path:
        service = Service(chromedriver_path)
    else:
        service = Service()

    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

# --- Data extraction ---
def get_water_data():
    driver = setup_driver()
    try:
        driver.get("https://singburi.thaiwater.net/wl")
        print("--> ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö 7 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        time.sleep(7)
        soup = BeautifulSoup(driver.page_source, "html.parser")
        for row in soup.find_all("tr"):
            th = row.find("th")
            if th and "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" in th.text:
                tds = row.find_all("td")
                if len(tds) < 8:
                    continue
                return {
                    "station_name": th.text.strip(),
                    "water_level": float(tds[1].text.strip()),
                    "bank_level": float(tds[2].text.strip()),
                    "status": tds[3].text.strip(),
                    "below_bank": float(tds[4].find_all("div")[1].text.strip()),
                    "time": tds[6].text.strip()
                }
        print("--> ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ' ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        return None
    except Exception as e:
        print(f"--> ‚ùå Error ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None
    finally:
        driver.quit()

# --- Main workflow ---
def main():
    print("--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô inburi_bridge_alert.py ---")
    last_data = {}
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            last_data = json.load(f)
            print(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {last_data}")

    data = get_water_data()
    if not data:
        print("--> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà, ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return

    notify = False
    reasons = []
    if "water_level" not in last_data:
        notify = True
        reasons.append("‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")
    else:
        diff = abs(data["water_level"] - last_data["water_level"])
        if diff >= NOTIFICATION_THRESHOLD:
            notify = True
            reasons.append(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô {diff*100:.0f} ‡∏ã‡∏°.")
        last_crit = any(k in last_data.get("status", "") for k in ["‡∏™‡∏π‡∏á", "‡∏•‡πâ‡∏ô", "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"])
        curr_crit = any(k in data["status"] for k in ["‡∏™‡∏π‡∏á", "‡∏•‡πâ‡∏ô", "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"])
        if curr_crit and not last_crit:
            notify = True
            reasons.append("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï")

    if not reasons:
        reasons.append("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå")

    print("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ:", reasons)

    if notify:
        is_critical = any(k in data["status"] for k in ["‡∏™‡∏π‡∏á", "‡∏•‡πâ‡∏ô", "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"])
        icon = "üö®" if is_critical else "‚úÖ"
        summary_text = (
            f"‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà *{abs(data['below_bank']):.2f}* ‡∏°." if is_critical
            else f"‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà *{data['below_bank']:.2f}* ‡∏°."
        )

        comparison_text = ""
        if "water_level" in last_data:
            level_diff = data["water_level"] - last_data["water_level"]
            trend_icon = "üìà" if level_diff > 0 else "üìâ" if level_diff < 0 else "‚ÜîÔ∏è"
            trend_sign = "+" if level_diff > 0 else ""
            comparison_text = (
                f"‚¨ÖÔ∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏î‡∏¥‡∏°: *{last_data['water_level']:.2f}* ‡∏°.‡∏£‡∏ó‡∏Å.\n\n"
                f"{trend_icon} ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: *‡∏ô‡πâ‡∏≥{'‡∏Ç‡∏∂‡πâ‡∏ô' if level_diff > 0 else '‡∏•‡∏á' if level_diff < 0 else '‡∏Ñ‡∏á‡∏ó‡∏µ‡πà'}* ({trend_sign}{level_diff:.2f} ‡∏°.)"
            )

        message = (
            f"üíß **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥**\n"
            f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: {data['station_name']}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: *{data['water_level']:.2f}* ‡∏°.‡∏£‡∏ó‡∏Å.\n"
            f"{comparison_text}\n\n"
            f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {icon} *{data['status']}*\n"
            f"       ({summary_text})\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üóìÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤: {data['time']}"
        )

        print(message)
        send_line_message(message)

        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    else:
        print("--> ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")

    print("--- ‡∏à‡∏ö script ---")

if __name__ == "__main__":
    main()
