# inburi_bridge_alert.py
import os
import json
import requests
from bs4 import BeautifulSoup

# --- Configurations ---
DATA_FILE = "inburi_bridge_data.json"

# ‡∏≠‡πà‡∏≤‡∏ô threshold ‡∏à‡∏≤‡∏Å env; ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ default = 0.10 ‡∏°.
_raw = os.getenv("NOTIFICATION_THRESHOLD_M", "")
try:
    NOTIFICATION_THRESHOLD = float(_raw) if _raw else 0.10
except ValueError:
    print(f"--> ‚ùó WARN: NOTIFICATION_THRESHOLD_M='{_raw}' ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡πÉ‡∏ä‡πâ default=0.10")
    NOTIFICATION_THRESHOLD = 0.10

LINE_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_TARGET_ID    = os.getenv("LINE_TARGET_ID")

def send_line_message(message: str):
    if not (LINE_ACCESS_TOKEN and LINE_TARGET_ID):
        print("--> ‚ùå LINE token/target ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤!")
        return
    url = "https://api.line.me/v2/bot/message/push"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    payload = {
        "to": LINE_TARGET_ID,
        "messages": [{"type": "text", "text": message}]
    }
    resp = requests.post(url, headers=headers, json=payload, timeout=10)
    if resp.status_code != 200:
        print(f"--> ‚ùå ‡∏™‡πà‡∏á LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {resp.status_code} {resp.text}")

def get_water_data():
    url = "https://singburi.thaiwater.net/wl"
    resp = requests.get(url, timeout=15)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text, "html.parser")

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å <th scope="row"> ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    for th in soup.find_all("th", {"scope": "row"}):
        if "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" in th.get_text():
            row = th.find_parent("tr")
            cols = row.find_all("td")
            # mapping ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            water_level = float(cols[1].get_text(strip=True))
            bank_level  = float(cols[2].get_text(strip=True))
            status      = row.find("span", class_="badge").get_text(strip=True)
            below_bank  = round(bank_level - water_level, 2)
            report_time = cols[6].get_text(strip=True)

            return {
                "station_name": "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ",
                "water_level":   water_level,
                "bank_level":    bank_level,
                "status":        status,
                "below_bank":    below_bank,
                "time":          report_time,
            }

    print("--> ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ")
    return None

def main():
    print("--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô inburi_bridge_alert.py ---")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
    last_data = {}
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            last_data = json.load(f)
        print(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {last_data}")

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    data = get_water_data()
    if not data:
        print("--> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà, ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥
    if last_data.get("water_level") != data["water_level"]:
        msg = (
            f"üåä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ {data['station_name']}:\n"
            f"‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥: {data['water_level']} ‡∏°.\n"
            f"‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á: {data['bank_level']} ‡∏°.\n"
            f"‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {data['status']}\n"
            f"‚Ä¢ ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏¥‡πà‡∏á: {data['below_bank']} ‡∏°.\n"
            f"üïí ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {data['time']}"
        )
        print(msg)
        send_line_message(msg)
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    else:
        print("--> ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")

    print("--- ‡∏à‡∏ö script ---")

if __name__ == "__main__":
    main()
