#!/usr/bin/env python3
import os
import json
import time
import requests
import shutil
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service

# --- Configuration ---
DATA_FILE               = "inburi_bridge_data.json"
NOTIFICATION_THRESHOLD  = float(os.getenv("NOTIFICATION_THRESHOLD_M", "0.10"))  # 10 cm
NEAR_BANK_THRESHOLD     = float(os.getenv("NEAR_BANK_THRESHOLD_M",    "1.0"))   # 1 m
LINE_ACCESS_TOKEN       = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_API_URL            = "https://api.line.me/v2/bot/message/broadcast"
TARGET_URL              = "https://waterdata.dwr.go.th/river-level/"  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á URL ‡∏à‡∏£‡∏¥‡∏á

def setup_driver():
    """Create a headless Chrome WebDriver suitable for GitHub Actions."""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.binary_location = os.getenv("CHROME_BIN", "/usr/bin/chromium-browser")

    chromedriver_path = shutil.which("chromedriver") or os.getenv("CHROMEDRIVER_PATH")
    service = Service(chromedriver_path) if chromedriver_path else Service()
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

def fetch_page(url):
    """Fetch HTML of the target page via Selenium."""
    driver = setup_driver()
    try:
        driver.get(url)
        time.sleep(7)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ page ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
        return driver.page_source
    finally:
        driver.quit()

def parse_data(html):
    """Parse required fields from HTML."""
    soup = BeautifulSoup(html, "html.parser")
    station_name = soup.select_one(".station-title").text.strip()
    water_level  = float(soup.select_one("#waterLevel").text)
    bank_level   = float(soup.select_one("#bankLevel").text)
    below_bank   = bank_level - water_level
    status       = "‡∏ô‡πâ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥" if water_level < bank_level else "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"
    timestamp    = soup.select_one(".updated-time").text.strip()
    return {
        "station_name": station_name,
        "water_level":  water_level,
        "bank_level":   bank_level,
        "below_bank":   below_bank,
        "status":       status,
        "time":         timestamp
    }

def load_last_data():
    """Load previous state from JSON, or return defaults."""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "station_name": "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ",
        "water_level":  0.0,
        "bank_level":   0.0,
        "below_bank":   0.0,
        "status":       "",
        "time":         ""
    }

def send_line_message(text):
    """Send a broadcast message via LINE Messaging API."""
    headers = {
        "Content-Type":  "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    payload = {"messages":[{"type":"text","text":text}]}
    resp = requests.post(LINE_API_URL, headers=headers, json=payload)
    if resp.status_code == 200:
        print("--> ‚úÖ ‡∏™‡πà‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        print(f"--> ‚ùå ‡∏™‡πà‡∏á LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {resp.status_code} {resp.text}")

def main():
    print(f"--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô {__file__} ---")
    last_data = load_last_data()
    print("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤:", last_data)

    html = fetch_page(TARGET_URL)
    data = parse_data(html)
    print("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:", data)

    notify = False
    reasons = []

    # 1) ‡∏Ç‡∏∂‡πâ‡∏ô/‡∏•‡∏á ‚â• threshold
    diff = data["water_level"] - last_data.get("water_level", 0.0)
    if abs(diff) >= NOTIFICATION_THRESHOLD:
        notify = True
        reasons.append(
            f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥{'‡∏Ç‡∏∂‡πâ‡∏ô' if diff>0 else '‡∏•‡∏á'} {abs(diff)*100:.0f} ‡∏ã‡∏°. "
            "(‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î)"
        )

    # 2) ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    if last_data.get("time") and data["time"] != last_data["time"]:
        notify = True
        reasons.append("‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà")

    # 3) ‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á
    if data["below_bank"] < 0:
        notify = True
        reasons.append(f"‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á {abs(data['below_bank']):.2f} ‡∏°.")
    elif data["below_bank"] <= NEAR_BANK_THRESHOLD:
        notify = True
        reasons.append(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á ({data['below_bank']:.2f} ‡∏°.)")

    if notify:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        diff_symbol  = '+' if diff >= 0 else '‚Äì'
        trend_text   = f"‡∏ô‡πâ‡∏≥{'‡∏Ç‡∏∂‡πâ‡∏ô' if diff>0 else '‡∏•‡∏á'}"
        status_emoji = 'üî¥' if data['below_bank'] < 0 else '‚ö†Ô∏è' if data['below_bank'] <= NEAR_BANK_THRESHOLD else '‚úÖ'
        status_txt   = data['status']
        distance_txt = (
            f"{'‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤' if data['below_bank']>0 else '‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà'}‡∏ï‡∏•‡∏¥‡πà‡∏á "
            f"{abs(data['below_bank']):.2f} ‡∏°."
        )

        message = (
            f"üíß **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ {data['station_name']}**\n"
            f"üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: *{data['water_level']:.2f}* ‡∏°.‡∏£‡∏ó‡∏Å.\n"
            f"‚¨ÖÔ∏è ‡πÄ‡∏î‡∏¥‡∏°: *{last_data.get('water_level', data['water_level']):.2f}* ‡∏°.‡∏£‡∏ó‡∏Å.\n"
            f"üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: *{trend_text}* {diff_symbol}{abs(diff):.2f} ‡∏°.\n"
            f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_emoji} *{status_txt}* ({distance_txt})\n"
            f"‚è∞ ‡∏ì: {data['time']}\n"
            f"‚ñ∂Ô∏è ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {', '.join(reasons)}"
        )

        print(message)
        send_line_message(message)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    else:
        print("--> ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")

    print("--- ‡∏à‡∏ö script ---")

if __name__ == "__main__":
    main()
