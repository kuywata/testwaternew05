import os
import json
import time
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

# ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
DATA_FILE = "inburi_bridge_data.json"

# ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å ENV (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏°‡∏ï‡∏£) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∞‡πÉ‡∏ä‡πâ 0.10 ‡∏°.
NOTIFICATION_THRESHOLD = float(os.getenv("NOTIFICATION_THRESHOLD_M", "0.10"))

# ‡∏≠‡πà‡∏≤‡∏ô LINE token ‡∏à‡∏≤‡∏Å GitHub Secret
LINE_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")


def send_line_message(message: str):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE via broadcast"""
    if not LINE_ACCESS_TOKEN:
        print("--> ‚ùå LINE_CHANNEL_ACCESS_TOKEN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤!")
        return

    url = "https://api.line.me/v2/bot/message/broadcast"
    headers = {
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {"messages": [{"type": "text", "text": message}]}

    try:
        resp = requests.post(url, headers=headers, json=payload, timeout=10)
        if resp.status_code == 200:
            print("--> ‚úÖ ‡∏™‡πà‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print(f"--> ‚ùå LINE API error: {resp.status_code} {resp.text}")
    except Exception as e:
        print(f"--> ‚ùå Exception when sending LINE: {e}")


def setup_driver():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ headless Chrome ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Selenium"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    # ‡∏ñ‡πâ‡∏≤ path ‡∏Ç‡∏≠‡∏á chromium ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á ENV CHROME_BIN ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ /usr/bin/chromium-browser
    driver = webdriver.Chrome(options=chrome_options)
    return driver


def get_water_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö singburi.thaiwater.net"""
    driver = setup_driver()
    try:
        driver.get("https://singburi.thaiwater.net/wl")
        print("--> ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö 7 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        time.sleep(7)
        soup = BeautifulSoup(driver.page_source, "html.parser")

        for row in soup.find_all("tr"):
            th = row.find("th")
            if th and "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" in th.text:
                tds = row.find_all("td")
                if len(tds) < 8:
                    continue

                station    = th.text.strip()
                water_lvl  = float(tds[1].text.strip())
                bank_lvl   = float(tds[2].text.strip())
                status     = tds[3].text.strip()
                below_bank = float(tds[4].find_all("div")[1].text.strip())
                timestamp  = tds[6].text.strip()

                return {
                    "station_name": station,
                    "water_level": water_lvl,
                    "bank_level": bank_lvl,
                    "status": status,
                    "below_bank": below_bank,
                    "time": timestamp
                }

        print("--> ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ' ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        return None

    except Exception as e:
        print(f"--> ‚ùå Error ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None

    finally:
        driver.quit()


def main():
    print("--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô inburi_bridge_alert.py ---")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    last_data = {}
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            last_data = json.load(f)
            print(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {last_data}")

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    data = get_water_data()
    if not data:
        print("--> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà, ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    notify = False
    reasons = []

    # ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å vs ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô threshold
    if "water_level" not in last_data:
        notify = True
        reasons.append("‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")
    else:
        diff = abs(data["water_level"] - last_data["water_level"])
        if diff >= NOTIFICATION_THRESHOLD:
            notify = True
            reasons.append(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô {diff*100:.0f} ‡∏ã‡∏°.")

        last_crit = any(k in last_data.get("status","") for k in ["‡∏™‡∏π‡∏á","‡∏•‡πâ‡∏ô","‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"])
        curr_crit = any(k in data["status"] for k in ["‡∏™‡∏π‡∏á","‡∏•‡πâ‡∏ô","‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"])
        if curr_crit and not last_crit:
            notify = True
            reasons.append("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï")

    if not reasons:
        reasons.append("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå")

    print("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ:", reasons)

    # ‡∏™‡πà‡∏á LINE ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if notify:
        icon = "üö®" if any(k in data["status"] for k in ["‡∏™‡∏π‡∏á","‡∏•‡πâ‡∏ô","‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"]) else "üíß"
        level_info = (
            f"‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà {abs(data['below_bank']):.2f} ‡πÄ‡∏°‡∏ï‡∏£"
            if icon == "üö®"
            else f"‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà {data['below_bank']:.2f} ‡πÄ‡∏°‡∏ï‡∏£"
        )

        message = (
            f"{icon} **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤**\n"
            f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: {data['station_name']}\n"
            f"üóìÔ∏è ‡πÄ‡∏ß‡∏•‡∏≤: {data['time']}\n"
            f"---------------------------------\n"
            f"üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{data['water_level']:.2f} ‡∏°.‡∏£‡∏ó‡∏Å.**\n"
            f"„Ä∞Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á: {data['bank_level']:.2f} ‡∏°.‡∏£‡∏ó‡∏Å.\n\n"
            f"üìä **‡∏™‡∏£‡∏∏‡∏õ: {data['status']}** ({level_info})"
        )

        print(message)
        send_line_message(message)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    else:
        print("--> ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")

    print("--- ‡∏à‡∏ö script ---")


if __name__ == "__main__":
    main()
