import os
import json
import time
import requests
from bs4 import BeautifulSoup

# --- Configurations ---
DATA_FILE = "inburi_bridge_data.json"

# ‡∏≠‡πà‡∏≤‡∏ô threshold ‡∏à‡∏≤‡∏Å env; ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏ä‡πâ default = 0.10 ‡πÄ‡∏°‡∏ï‡∏£
_raw = os.getenv("NOTIFICATION_THRESHOLD_M")
try:
    NOTIFICATION_THRESHOLD = float(_raw) if _raw else 0.10
except ValueError:
    print(f"--> ‚ùó WARN: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á NOTIFICATION_THRESHOLD_M='{_raw}' ‡πÄ‡∏õ‡πá‡∏ô float, ‡πÉ‡∏ä‡πâ default=0.10")
    NOTIFICATION_THRESHOLD = 0.10

LINE_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_TARGET_ID = os.getenv("LINE_TARGET_ID")

def send_line_message(message: str):
    if not LINE_ACCESS_TOKEN or not LINE_TARGET_ID:
        print("--> ‚ùå LINE token/target ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤!")
        return
    url = "https://api.line.me/v2/bot/message/push"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    payload = {
        "to": LINE_TARGET_ID,
        "messages": [{"type": "text", "text": message}]
    }
    resp = requests.post(url, headers=headers, json=payload, timeout=10)
    if resp.status_code != 200:
        print(f"--> ‚ùå ‡∏™‡πà‡∏á LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {resp.status_code} {resp.text}")

def get_water_data():
    url = "https://singburi.thaiwater.net/wl"
    resp = requests.get(url, timeout=15)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text, "html.parser")

    table = soup.find("table", {"class": "table-striped"})
    if not table:
        print("--> ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return None

    for row in table.find_all("tr"):
        th = row.find("th")
        cols = row.find_all("td")
        if th and "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" in th.text and len(cols) >= 3:
            water_level = float(cols[1].text.strip())
            bank_level = float(cols[2].text.strip())
            status = cols[3].text.strip() if len(cols) > 3 else "-"
            below_bank = round(bank_level - water_level, 2)
            current_time = time.strftime("%H:%M ‡∏ô.", time.localtime())
            return {
                "station_name": "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ",
                "water_level": water_level,
                "bank_level": bank_level,
                "status": status,
                "below_bank": below_bank,
                "time": current_time,
            }
    return None

def main():
    try:
        print("--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô inburi_bridge_alert.py ---")

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
        last_data = {}
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                last_data = json.load(f)
            print(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {last_data}")

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        data = get_water_data()
        if not data:
            print("--> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà, ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            return

        # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
        if last_data.get("water_level") != data["water_level"]:
            msg = (
                f"üåä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ {data['station_name']}:\n"
                f"‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥: {data['water_level']} ‡∏°.\n"
                f"‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á: {data['bank_level']} ‡∏°.\n"
                f"‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {data['status']}\n"
                f"‚Ä¢ ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏¥‡πà‡∏á: {data['below_bank']} ‡∏°.\n"
                f"üïí ‡πÄ‡∏ß‡∏•‡∏≤: {data['time']}"
            )
            print(msg)
            send_line_message(msg)
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        else:
            print("--> ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")

        print("--- ‡∏à‡∏ö script ---")
    except Exception as e:
        import traceback
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)
        traceback.print_exc()
        raise

if __name__ == "__main__":
    main()