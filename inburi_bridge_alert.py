import os
import json
import requests

# --- Constants and configuration ---
DATA_FILE = "inburi_bridge_data.json"
NOTIFICATION_THRESHOLD = float(os.getenv("NOTIFICATION_THRESHOLD_M", "0.10"))
NEAR_BANK_THRESHOLD    = float(os.getenv("NEAR_BANK_THRESHOLD_M", "1.0"))
LINE_ACCESS_TOKEN      = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_API_URL           = "https://api.line.me/v2/bot/message/broadcast"

# API Endpoint for Inburi Station (C.2)
API_URL = "https://api-v3.thaiwater.net/api/v1/stations/tele_station/C.2?include=basin,sub_basin,province,amphoe,tambol,rid_center,agency"

def load_last_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {} # Return empty dict if no file

def fetch_and_parse_data():
    try:
        response = requests.get(API_URL, timeout=15)
        response.raise_for_status()
        api_data = response.json()
        station_data = api_data.get("data", {})
        water_level = station_data.get("tele_station_waterlevel", {}).get("storage_waterlevel")
        bank_level = station_data.get("tele_station_waterlevel", {}).get("ground_waterlevel")
        timestamp = station_data.get("tele_station_waterlevel", {}).get("storage_datetime")
        status = station_data.get("tele_station_waterlevel", {}).get("waterlevel_status", {}).get("waterlevel_status_name")
        water_level = float(water_level) if water_level is not None else 0.0
        bank_level = float(bank_level) if bank_level is not None else 0.0
        return {
            "station_name": station_data.get("tele_station_name", {}).get("th", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"),
            "water_level": water_level,
            "bank_level": bank_level,
            "below_bank": bank_level - water_level,
            "status": status if status else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            "time": timestamp.replace("T", " ").split("+")[0] if timestamp else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤"
        }
    except Exception as e:
        print(f"--> ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return None

def send_line_message(text):
    if not LINE_ACCESS_TOKEN:
        print("--> ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ TOKEN")
        return
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"}
    payload = {"messages": [{"type": "text", "text": text}]}
    try:
        resp = requests.post(LINE_API_URL, headers=headers, json=payload, timeout=10)
        if resp.status_code == 200:
            print("--> ‚úÖ ‡∏™‡πà‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print(f"--> ‚ùå ‡∏™‡πà‡∏á LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {resp.status_code} {resp.text}")
    except Exception as e:
        print(f"--> ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE: {e}")

def main():
    print("--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (API Version) ---")
    last_data = load_last_data()
    print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {last_data.get('water_level', '‡πÑ‡∏°‡πà‡∏°‡∏µ')}")
    data = fetch_and_parse_data()
    if not data:
        print("--- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ---")
        return
    print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà: {data['water_level']}")
    if not last_data or data["time"] == last_data.get("time"):
        print("--> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        print("--- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---")
        return
    diff = data["water_level"] - last_data.get("water_level", 0.0)
    trend_text = f"‡∏ô‡πâ‡∏≥{'‡∏Ç‡∏∂‡πâ‡∏ô' if diff > 0 else '‡∏•‡∏á'}" if diff != 0 else "‡∏Ñ‡∏á‡∏ó‡∏µ‡πà"
    diff_symbol = '+' if diff >= 0 else ''
    status_emoji = 'üî¥' if '‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏¥‡πà‡∏á' in data['status'] else '‚ö†Ô∏è' if '‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á' in data['status'] else '‚úÖ'
    distance_text = f"{'‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤' if data['below_bank'] >= 0 else '‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤'}‡∏ï‡∏•‡∏¥‡πà‡∏á {abs(data['below_bank']):.2f} ‡∏°."
    message = (
        f"üíß ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ {data['station_name']}\n\n"
        f"üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {data['water_level']:.2f} ‡∏°.‡∏£‡∏ó‡∏Å.\n"
        f"({trend_text} {diff_symbol}{abs(diff):.2f} ‡∏°.)\n\n"
        f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_emoji} {data['status']}\n"
        f"({distance_text})\n\n"
        f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {data['time']}"
    )
    print("--- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á LINE ---")
    print(message)
    send_line_message(message)
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"--> ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {DATA_FILE}")
    print("--- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---")

if __name__ == "__main__":
    main()
