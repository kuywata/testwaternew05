import os
import json
import time
import requests
import shutil
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service

# --- Constants and configuration ---
DATA_FILE = "inburi_bridge_data.json"
# NOTIFICATION_THRESHOLD in meters (e.g., 0.10 for 10 cm)
NOTIFICATION_THRESHOLD = float(os.getenv("NOTIFICATION_THRESHOLD_M", "0.10"))
# NEAR_BANK_THRESHOLD in meters (e.g., 1.0 for 1 m)
NEAR_BANK_THRESHOLD    = float(os.getenv("NEAR_BANK_THRESHOLD_M", "1.0"))
# LINE Messaging API token
LINE_ACCESS_TOKEN      = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_API_URL           = "https://api.line.me/v2/bot/message/broadcast"


def load_last_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    # Default initial state
    return {
        "station_name": "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ",
        "water_level": 0.0,
        "bank_level": 0.0,
        "below_bank": 0.0,
        "status": "",
        "time": ""
    }


def fetch_page(url):
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox") # Add this for compatibility in GitHub Actions
    options.add_argument("--disable-dev-shm-usage") # Add this for compatibility
    options.binary_location = os.getenv("CHROME_BIN", "/usr/bin/chromium-browser")
    
    # In GitHub Actions, chromedriver is often in the PATH, so Service() is enough
    driver = webdriver.Chrome(service=Service(), options=options)
    
    html = ""
    try:
        driver.get(url)
        # Wait for the dynamic content to load
        time.sleep(7) 
        html = driver.page_source
    except Exception as e:
        print(f"--> ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö: {e}")
    finally:
        driver.quit()
        
    return html


def parse_data(html):
    soup = BeautifulSoup(html, "html.parser")
    
    try:
        # New selectors for thaiwater.net
        station_name_raw = soup.select_one("h5.modal-title").text.strip() # "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ C.2 ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ"
        station_name = station_name_raw.replace("‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ", "") # "C.2 ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ"
        
        details_div = soup.find("div", id="station_detail_graph")
        
        water_level_label = details_div.find(lambda tag: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' in tag.text)
        water_level = float(water_level_label.find_next_sibling("div").text.strip())

        bank_level_label = details_div.find(lambda tag: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á' in tag.text)
        bank_level = float(bank_level_label.find_next_sibling("div").text.strip())
        
        below_bank = bank_level - water_level

        time_label = details_div.find(lambda tag: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' in tag.text)
        timestamp = time_label.find_next_sibling("div").text.strip().replace(" ‡∏ô.", "‡∏ô.")

        status_label = details_div.find(lambda tag: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå' in tag.text)
        status = status_label.find_next_sibling("div").text.strip()

        return {
            "station_name": station_name,
            "water_level": water_level,
            "bank_level": bank_level,
            "below_bank": below_bank,
            "status": status,
            "time": timestamp
        }
    except Exception as e:
        print(f"--> ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö: {e}")
        print("--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return None


def send_line_message(text):
    if not LINE_ACCESS_TOKEN:
        print("--> ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE_CHANNEL_ACCESS_TOKEN ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        return
        
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    payload = {"messages": [{"type": "text", "text": text} ]}
    resp = requests.post(LINE_API_URL, headers=headers, json=payload)
    if resp.status_code != 200:
        print(f"--> ‚ùå ‡∏™‡πà‡∏á LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {resp.status_code} {resp.text}")
    else:
        print("--> ‚úÖ ‡∏™‡πà‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")


def main():
    print(f"--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô {__file__} ---")
    # URL for the specific station "C.2 ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" on the new platform
    url = "https://www.thaiwater.net/water/station/inburi/C.2"
    
    last_data = load_last_data()
    print("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤:", last_data)

    html = fetch_page(url)
    if not html:
        print("--- ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏î‡πâ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---")
        return

    data = parse_data(html)
    if not data:
        print("--- ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏î‡πâ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---")
        return
        
    print("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:", data)

    notify = False
    reasons = []

    # 1) ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö diff ‡∏Ç‡∏∂‡πâ‡∏ô/‡∏•‡∏á ‚â• threshold
    diff = data["water_level"] - last_data.get("water_level", 0.0)
    if abs(diff) >= NOTIFICATION_THRESHOLD:
        notify = True
        reasons.append(
            f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥{'‡∏Ç‡∏∂‡πâ‡∏ô' if diff>0 else '‡∏•‡∏á'} {abs(diff)*100:.0f} ‡∏ã‡∏°."
        )

    # 2) ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ (‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
    if last_data.get("time") and data["time"] != last_data["time"]:
         # This condition is usually met if there's any change, so let's rely on other reasons for the notification text.
         # We can assume if other conditions are met, it's a new event.
         pass

    # 3) ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á
    if data["below_bank"] < 0:
        if not any("‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á" in r for r in reasons):
             reasons.append(f"‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á {abs(data['below_bank']):.2f} ‡∏°.")
    elif data["below_bank"] <= NEAR_BANK_THRESHOLD:
        if not any("‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á" in r for r in reasons):
            reasons.append(f"‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á ({data['below_bank']:.2f} ‡∏°.)")

    # If any reason was added, we should notify.
    if reasons:
        notify = True
        if "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥" not in reasons[0] : # If the first reason is not the water level change, add a generic "New data" reason
             if data["time"] != last_data.get("time"):
                reasons.insert(0, "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà")


    if notify:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        diff_symbol = '+' if diff >= 0 else ''
        trend_text  = f"‡∏ô‡πâ‡∏≥{'‡∏Ç‡∏∂‡πâ‡∏ô' if diff>0 else '‡∏•‡∏á'}" if diff != 0 else "‡∏Ñ‡∏á‡∏ó‡∏µ‡πà"
        status_emoji = 'üî¥' if '‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á' in data['status'] or '‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏¥‡πà‡∏á' in data['status'] else '‚ö†Ô∏è' if '‡∏ô‡πâ‡∏≠‡∏¢‡∏ß‡∏¥‡∏Å‡∏§‡∏ï' in data['status'] else '‚úÖ'
        
        status_text = data['status']
        distance_text = (
            f"{'‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤' if data['below_bank']>=0 else '‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤'}‡∏ï‡∏•‡∏¥‡πà‡∏á {abs(data['below_bank']):.2f} ‡∏°."
        )

        message = (
            f"üíß ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ {data['station_name']}\n\n"
            f"üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {data['water_level']:.2f} ‡∏°.‡∏£‡∏ó‡∏Å.\n"
            f"({trend_text} {diff_symbol}{abs(diff):.2f} ‡∏°.)\n\n"
            f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_emoji} {status_text}\n"
            f"({distance_text})\n\n"
            f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {data['time']}\n"
            f"‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {', '.join(reasons)}"
        )

        print("--- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á LINE ---")
        print(message)
        send_line_message(message)

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"--> ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {DATA_FILE}")
    else:
        print("--> ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")

    print("--- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---")


if __name__ == "__main__":
    main()
