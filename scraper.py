import os
import time
import re
import requests
from datetime import datetime, timedelta
import pytz
from bs4 import BeautifulSoup

from selenium import webdriver
from selenium.webdriver.chrome.options import Options

# ‚Äë‚Äë‚Äë ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ URL ‚Äë‚Äë‚Äë
URL = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET_ID = os.environ.get('LINE_TARGET_ID')
TIMEZONE_THAILAND = pytz.timezone('Asia/Bangkok')
HISTORICAL_LOG_FILE = 'historical_log.csv'
LAST_DATA_FILE = 'last_data.txt'


def get_water_data():
    """
    ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Selenium ‡πÅ‡∏ö‡∏ö headless ‡πÉ‡∏´‡πâ JS ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    ‡πÅ‡∏•‡πâ‡∏ß parse ‡πÄ‡∏≠‡∏≤ <td class="text_bold" colspan="2"> ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‚Äú439.00/‚Ä¶ cms‚Äù
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ "439.00 cms" ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç+‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠
    """
    # ‡πÄ‡∏ã‡πá‡∏ï Chrome headless
    opts = Options()
    opts.add_argument("--headless")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=opts)
    driver.get(URL)
    time.sleep(5)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ JS ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
    html = driver.page_source
    driver.quit()

    soup = BeautifulSoup(html, 'html.parser')
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å td ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏ (within <tr valign="buttom"> ‡πÅ‡∏ï‡πà selector ‡∏ô‡∏µ‡πâ‡∏Å‡πá‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠)
    cell = soup.select_one('td.text_bold[colspan="2"]')
    if cell:
        txt = cell.get_text(strip=True)  # e.g. "439.00/2840cms"
        # ‡∏ï‡∏±‡∏î‡πÄ‡∏≠‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô "/" ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏≠‡∏≠‡∏Å
        main = txt.split('/', 1)[0]
        clean = re.sub(r'[^\d.]', '', main)
        if clean:
            return f"{clean} cms"

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ fallback ‡∏î‡πâ‡∏ß‡∏¢ regex ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç+cms ‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô html
    m = re.search(r'([\d\.]+)\s*cms', html)
    if m:
        return f"{m.group(1)} cms"

    print("Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥")
    return None


def get_historical_data(target_date):
    if not os.path.exists(HISTORICAL_LOG_FILE):
        return None
    start = target_date - timedelta(hours=12)
    end = target_date + timedelta(hours=12)
    best, best_diff = None, timedelta.max
    with open(HISTORICAL_LOG_FILE, 'r', encoding='utf-8') as f:
        for line in f:
            try:
                ts, val = line.strip().split(',', 1)
                dt = datetime.fromisoformat(ts)
                if dt.tzinfo is None:
                    dt = TIMEZONE_THAILAND.localize(dt)
                if start <= dt <= end:
                    diff = abs(target_date - dt)
                    if diff < best_diff:
                        best_diff, best = diff, val
            except ValueError:
                continue
    return best


def append_to_historical_log(now, data):
    with open(HISTORICAL_LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{now.isoformat()},{data}\n")


def send_line_message(message):
    if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_TARGET_ID:
        print("Missing LINE credentials.")
        return
    url = 'https://api.line.me/v2/bot/message/push'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'
    }
    payload = {
        'to': LINE_TARGET_ID,
        'messages': [{'type': 'text', 'text': message}]
    }
    try:
        resp = requests.post(url, headers=headers, json=payload, timeout=10)
        resp.raise_for_status()
        print("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", resp.status_code)
    except Exception as e:
        print("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e)


def main():
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    last = ''
    if os.path.exists(LAST_DATA_FILE):
        last = open(LAST_DATA_FILE, 'r', encoding='utf-8').read().strip()

    current = get_water_data()
    if not current:
        print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        return

    print("‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:", current)
    now_th = datetime.now(TIMEZONE_THAILAND)

    # ‡∏´‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    last_year = now_th - timedelta(days=365)
    hist = get_historical_data(last_year)
    hist_str = f"\n\n‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ({last_year.strftime('%d/%m/%Y')}): {hist}" if hist else ''

    message = (
        f"üåä ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥ ‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚úÖ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current}\n"
        f"‚¨ÖÔ∏è ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°: {last or '‡πÑ‡∏°‡πà‡∏û‡∏ö'}\n"
        f"üóìÔ∏è {now_th.strftime('%d/%m/%Y %H:%M:%S')}"
        f"{hist_str}"
    )
    send_line_message(message)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    with open(LAST_DATA_FILE, 'w', encoding='utf-8') as f:
        f.write(current)
    append_to_historical_log(now_th, current)
    print("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï historical log ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


if __name__ == "__main__":
    main()
