import requests
import re
import json
import os
from datetime import datetime, timedelta
import pytz
import time

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ URL ---
URL = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET_ID = os.environ.get('LINE_TARGET_ID')
TIMEZONE_THAILAND = pytz.timezone('Asia/Bangkok')
HISTORICAL_LOG_FILE = 'historical_log.csv'
LAST_DATA_FILE = 'last_data.txt' # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå last_data.txt

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
def get_water_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    try:
        timestamp = int(time.time())
        url_with_cache_bust = f"{URL}?_={timestamp}"
        response = requests.get(url_with_cache_bust, timeout=15)
        response.raise_for_status()
        match = re.search(r'var json_data = (\[.*\]);', response.text)
        if not match: return None
        data = json.loads(match.group(1))
        station_data = data[0].get('itc_water', {}).get('C13', None)
        if station_data:
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 'qmax' ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 'storage' ‡∏î‡πâ‡∏ß‡∏¢ ‡∏Å‡πá‡πÉ‡∏ä‡πâ f"{station_data.get('storage', '-')}/ {station_data.get('qmax', '-')} cms"
            # ‡πÅ‡∏ï‡πà‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏£‡∏∞‡∏ö‡∏∏ "‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥" ‡∏à‡∏∂‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏µ‡πà qmax
            return f"{station_data.get('qmax', '-')} cms" # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ qmax ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        return None
    except Exception as e:
        print(f"Error in get_water_data: {e}")
        return None

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
def get_historical_data(target_date):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå log"""
    if not os.path.exists(HISTORICAL_LOG_FILE):
        return None
    
    start_range = target_date - timedelta(hours=12)
    end_range = target_date + timedelta(hours=12)
    
    closest_entry = None
    smallest_diff = timedelta.max

    with open(HISTORICAL_LOG_FILE, 'r', encoding='utf-8') as f:
        for line in f:
            try:
                timestamp_str, value = line.strip().split(',', 1)
                log_date = datetime.fromisoformat(timestamp_str)
                
                # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ log_date ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏°‡∏µ timezone ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                # .tzinfo is None ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ timezone (naive)
                if log_date.tzinfo is None:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timezone ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô
                    log_date = TIMEZONE_THAILAND.localize(log_date)
                # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                
                # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ log_date ‡πÄ‡∏õ‡πá‡∏ô aware ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
                if start_range <= log_date <= end_range:
                    diff = abs(target_date - log_date)
                    if diff < smallest_diff:
                        smallest_diff = diff
                        closest_entry = value
            except ValueError:
                continue
                
    return closest_entry

def append_to_historical_log(now, data):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå log"""
    with open(HISTORICAL_LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{now.isoformat()},{data}\n")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á LINE ---
def send_line_message(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE"""
    if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_TARGET_ID:
        print("LINE credentials not set.")
        return
    url = 'https://api.line.me/v2/bot/message/push'
    headers = { 'Content-Type': 'application/json', 'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}' }
    payload = { 'to': LINE_TARGET_ID, 'messages': [{'type': 'text', 'text': message}] }
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        print("LINE message sent successfully!")
    except Exception as e:
        print(f"Error sending LINE message: {e}")

# --- ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å ---
def main():
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ last_data ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    last_data = ''
    if os.path.exists(LAST_DATA_FILE): # ‡πÉ‡∏ä‡πâ LAST_DATA_FILE ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        with open(LAST_DATA_FILE, 'r', encoding='utf-8') as f:
            last_data = f.read().strip()
            
    current_data = get_water_data()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if current_data:
        print(f"Current data retrieved: {current_data}")
        
        now_thailand = datetime.now(TIMEZONE_THAILAND)
        
        last_year_date = now_thailand - timedelta(days=365)
        historical_data = get_historical_data(last_year_date)
        
        historical_text = ""
        if historical_data:
            last_year_date_str = last_year_date.strftime("%d/%m/%Y")
            # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏≠‡∏≤ ` ‡∏≠‡∏≠‡∏Å)
            historical_text = f"\n\n‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ({last_year_date_str})\n‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: {historical_data}"
        else:
            print("Historical data not found for last year.")
        
        formatted_datetime = now_thailand.strftime("%d/%m/%Y %H:%M:%S")
        
        sponsor_line = "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô..."
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô "‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥"
        # ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ last_data ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
       message = (f"üåä *‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥ ‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤, ‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó*\n"
           f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
           f"‚úÖ *‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô*\n`{current_data}`\n\n"
           f"‚¨ÖÔ∏è *‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° (‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)*\n`{last_data if last_data else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°'}`\n"
           f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
           f"üóìÔ∏è {formatted_datetime}"
           f"{historical_text}\n\n"
           f"{sponsor_line}")

        send_line_message(message)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô last_data.txt ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        with open(LAST_DATA_FILE, 'w', encoding='utf-8') as f:
            f.write(current_data)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô historical_log.csv ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        append_to_historical_log(now_thailand, current_data)
        print("Appended new data to historical log and updated last_data.txt.")
        
    else:
        print("Could not retrieve current data. No notification sent.")

if __name__ == "__main__":
    main()
